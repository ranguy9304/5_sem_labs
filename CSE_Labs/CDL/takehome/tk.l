%{
#include "tk.tab.h"  // Include the header generated by Bison


%}

digit       [0-9]
letter      [a-zA-Z]
identifier  {letter}({letter}|{digit})*
whitespace  [ \t\n]

%%

"class"                   { printf("%s",yytext);return CLASS; }
"public"                  { printf("%s",yytext);return PUBLIC; }
"static"                  { printf("%s",yytext);return STATIC; }
"void"                    { printf("%s",yytext);return VOID; }
"int"                     { printf("%s",yytext);return INT; }
"boolean"                 { printf("%s",yytext);return BOOLEAN; }
"String"                  { printf("%s",yytext);return STRING; }
"if"                      { printf("%s",yytext);return IF; }
"else"                    { printf("%s",yytext);return ELSE; }
"while"                   { printf("%s",yytext);return WHILE; }
"for"                     { printf("%s",yytext);return FOR; }
"return"                  { printf("%s",yytext);return RETURN; }
"System.out.println"      { printf("%s",yytext);return PRINT; }
"main"                    { printf("%s",yytext);return MAIN; }
"true"                    { printf("%s",yytext);yylval.intValue = 1; return BOOLEAN_LITERAL; }
"false"                   { printf("%s",yytext);yylval.intValue = 0; return BOOLEAN_LITERAL; }

{identifier}              { printf("%s",yytext);yylval.strValue = strdup(yytext); return IDENTIFIER; }
\"[^"\n]*\"               { printf("%s",yytext);yylval.strValue = strdup(yytext); return STRING_LITERAL; }
{digit}+                  { printf("%s",yytext);yylval.intValue = atoi(yytext); return INT_LITERAL; }

"+"                       { printf("%s",yytext);return PLUS; }
"-"                       { printf("%s",yytext);return MINUS; }
"*"                       { printf("%s",yytext);return MULTIPLY; }
"/"                       { printf("%s",yytext);return DIVIDE; }
"="                       { printf("%s",yytext);return EQUALS; }
"=="                      { printf("%s",yytext);return EQUALS_EQUALS; }
"!="                      { printf("%s",yytext);return NOT_EQUALS; }
"<"                       { printf("%s",yytext);return LESS_THAN; }
">"                       { printf("%s",yytext);return GREATER_THAN; }
"<="                      { printf("%s",yytext);return LESS_EQUALS; }
">="                      { printf("%s",yytext);return GREATER_EQUALS; }
"("                       { printf("%s",yytext);return LPAREN; }
")"                       { printf("%s",yytext);return RPAREN; }
"{"                       { printf("%s",yytext);return LBRACE; }
"}"                       { printf("%s",yytext);return RBRACE; }
";"                       { printf("%s",yytext);return SEMICOLON; }
","                       { printf("%s",yytext);return COMMA; }
"["							{ printf("%s",yytext);return LBRACKET; }
"]"							{ printf("%s",yytext);return RBRACKET; }
{whitespace}              ; // Ignore whitespace
.                         { yyerror("Unknown character"); }

%%

int yywrap() {
    return 1;
}

